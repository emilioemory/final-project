library(plotly)
library(dplyr)
# define the levels as they appear in my formats and sas output
edu_levels <- c("LESS THAN 12 YEARS",
"12 YEARS",
"MORE THAN 12 YEARS, NON-COLLEGE GRAD",
"COLLEGE GRADUATE")
race_levels <- c("NON-HISPANIC WHITE ONLY",
"NON-HISPANIC BLACK ONLY")
region_levels <- c("NORTHEAST", "MIDWEST", "SOUTH", "WEST")
# for demonstration, i simulate an aggregated dataset.
# in my actual analysis, i would calculate the uptake percentages and confidence intervals.
# here, uptake percentages are simulated between 40 and 90.
set.seed(123)
agg_data <- expand.grid(
education = edu_levels,
race = race_levels,
region = region_levels,
stringsAsFactors = FALSE
) %>%
mutate(
uptake = round(runif(n(), 40, 90), 1),
ci_lower = uptake - round(runif(n(), 2, 5), 1),
ci_upper = uptake + round(runif(n(), 2, 5), 1)
)
# i'll create traces for each combination of region and race.
# initially, only the traces for the first region (northeast) will be visible.
traces <- list()
for (reg in region_levels) {
# filter data for the given region
reg_data <- filter(agg_data, region == reg)
for (race in race_levels) {
race_data <- filter(reg_data, race == race)
traces <- c(traces, list(
list(
x = race_data$education,
y = race_data$uptake,
type = "bar",
name = race,
error_y = list(
type = "data",
array = race_data$ci_upper - race_data$uptake,
arrayminus = race_data$uptake - race_data$ci_lower
),
visible = if (reg == region_levels[1]) TRUE else FALSE,
text = paste0("Race: ", race_data$race,
"<br>Uptake: ", race_data$uptake, "%",
"<br>CI: [", race_data$ci_lower, ", ", race_data$ci_upper, "]"),
hoverinfo = "text"
)
))
}
}
# create dropdown buttons for each region.
buttons <- list()
num_traces_per_region <- length(race_levels)
for (i in seq_along(region_levels)) {
visibility <- rep(FALSE, length(traces))
start_idx <- (i - 1) * num_traces_per_region + 1
end_idx   <- i * num_traces_per_region
visibility[start_idx:end_idx] <- TRUE
buttons[[i]] <- list(
method = "update",
args = list(list(visible = visibility),
list(title = paste("Adolescent HPV Vaccine Uptake - Region:", region_levels[i]))),
label = region_levels[i]
)
}
# build the plotly object by adding each trace.
p <- plot_ly()
for (trace in traces) {
p <- add_trace(p,
x = trace$x,
y = trace$y,
type = trace$type,
name = trace$name,
error_y = trace$error_y,
visible = trace$visible,
text = trace$text,
hoverinfo = trace$hoverinfo)
}
# layout: stacked bars, axis labels, title, and dropdown filter.
p <- layout(p,
title = paste("Adolescent HPV Vaccine Uptake - Region:", region_levels[1]),
xaxis = list(title = "Maternal Education Level", tickfont = list(size = 14), titlefont = list(size = 16)), # increase tickfont and titlefont size
yaxis = list(title = "Percentage of Teenagers Vaccinated", titlefont = list(size = 16), tickfont = list(size = 14)), # increase axis title and tick font size
barmode = "stack",
updatemenus = list(
list(
type = "dropdown",
active = 0,
buttons = buttons,
x = 0.1,
xanchor = "left",
y = 1.15,
yanchor = "top"
)
),
font = list(size = 14), # increase general font size
legend = list(font = list(size = 12)), # increase legend font size
hoverlabel = list(font = list(size = 12)), # increase hover text font size
margin = list(b = 100), # increase bottom margin to prevent x-axis labels from being cut off
width = 800, #adding width to scale up figure
height = 600) #adding height to scale up figure
p
library(plotly)
library(dplyr)
# define the levels as they appear in my formats and sas output
edu_levels <- c("LESS THAN 12 YEARS",
"12 YEARS",
"MORE THAN 12 YEARS, NON-COLLEGE GRAD",
"COLLEGE GRADUATE")
race_levels <- c("NON-HISPANIC WHITE ONLY",
"NON-HISPANIC BLACK ONLY")
region_levels <- c("NORTHEAST", "MIDWEST")
# for demonstration, i simulate an aggregated dataset.
# in my actual analysis, i would calculate the uptake percentages and confidence intervals.
# here, uptake percentages are simulated between 40 and 90.
set.seed(123)
agg_data <- expand.grid(
education = edu_levels,
race = race_levels,
region = region_levels,
stringsAsFactors = FALSE
) %>%
mutate(
uptake = round(runif(n(), 40, 90), 1),
ci_lower = uptake - round(runif(n(), 2, 5), 1),
ci_upper = uptake + round(runif(n(), 2, 5), 1)
)
# i'll create traces for each combination of region and race.
# initially, only the traces for the first region (northeast) will be visible.
traces <- list()
for (reg in region_levels) {
# filter data for the given region
reg_data <- filter(agg_data, region == reg)
for (race in race_levels) {
race_data <- filter(reg_data, race == race)
traces <- c(traces, list(
list(
x = race_data$education,
y = race_data$uptake,
type = "bar",
name = race,
error_y = list(
type = "data",
array = race_data$ci_upper - race_data$uptake,
arrayminus = race_data$uptake - race_data$ci_lower
),
visible = if (reg == region_levels[1]) TRUE else FALSE,
text = paste0("Race: ", race_data$race,
"<br>Uptake: ", race_data$uptake, "%",
"<br>CI: [", race_data$ci_lower, ", ", race_data$ci_upper, "]"),
hoverinfo = "text"
)
))
}
}
# create dropdown buttons for each region.
buttons <- list()
num_traces_per_region <- length(race_levels)
for (i in seq_along(region_levels)) {
visibility <- rep(FALSE, length(traces))
start_idx <- (i - 1) * num_traces_per_region + 1
end_idx   <- i * num_traces_per_region
visibility[start_idx:end_idx] <- TRUE
buttons[[i]] <- list(
method = "update",
args = list(list(visible = visibility),
list(title = paste("Adolescent HPV Vaccine Uptake - Region:", region_levels[i]))),
label = region_levels[i]
)
}
# build the plotly object by adding each trace.
p <- plot_ly()
for (trace in traces) {
p <- add_trace(p,
x = trace$x,
y = trace$y,
type = trace$type,
name = trace$name,
error_y = trace$error_y,
visible = trace$visible,
text = trace$text,
hoverinfo = trace$hoverinfo)
}
# layout: stacked bars, axis labels, title, and dropdown filter.
p <- layout(p,
title = paste("Adolescent HPV Vaccine Uptake - Region:", region_levels[1]),
xaxis = list(title = "Maternal Education Level", tickfont = list(size = 14), titlefont = list(size = 16)), # increase tickfont and titlefont size
yaxis = list(title = "Percentage of Teenagers Vaccinated", titlefont = list(size = 16), tickfont = list(size = 14)), # increase axis title and tick font size
barmode = "stack",
updatemenus = list(
list(
type = "dropdown",
active = 0,
buttons = buttons,
x = 0.1,
xanchor = "left",
y = 1.15,
yanchor = "top"
)
),
font = list(size = 14), # increase general font size
legend = list(font = list(size = 12)), # increase legend font size
hoverlabel = list(font = list(size = 12)), # increase hover text font size
margin = list(b = 100), # increase bottom margin to prevent x-axis labels from being cut off
width = 800, #adding width to scale up figure
height = 600) #adding height to scale up figure
p
library(plotly)
library(dplyr)
# define the levels as they appear in my formats and sas output
edu_levels <- c("COLLEGE GRADUATE")
race_levels <- c("NON-HISPANIC WHITE ONLY",
"NON-HISPANIC BLACK ONLY")
region_levels <- c("NORTHEAST", "MIDWEST")
# for demonstration, i simulate an aggregated dataset.
# in my actual analysis, i would calculate the uptake percentages and confidence intervals.
# here, uptake percentages are simulated between 40 and 90.
set.seed(123)
agg_data <- expand.grid(
education = edu_levels,
race = race_levels,
region = region_levels,
stringsAsFactors = FALSE
) %>%
mutate(
uptake = round(runif(n(), 40, 90), 1),
ci_lower = uptake - round(runif(n(), 2, 5), 1),
ci_upper = uptake + round(runif(n(), 2, 5), 1)
)
# i'll create traces for each combination of region and race.
# initially, only the traces for the first region (northeast) will be visible.
traces <- list()
for (reg in region_levels) {
# filter data for the given region
reg_data <- filter(agg_data, region == reg)
for (race in race_levels) {
race_data <- filter(reg_data, race == race)
traces <- c(traces, list(
list(
x = race_data$education,
y = race_data$uptake,
type = "bar",
name = race,
error_y = list(
type = "data",
array = race_data$ci_upper - race_data$uptake,
arrayminus = race_data$uptake - race_data$ci_lower
),
visible = if (reg == region_levels[1]) TRUE else FALSE,
text = paste0("Race: ", race_data$race,
"<br>Uptake: ", race_data$uptake, "%",
"<br>CI: [", race_data$ci_lower, ", ", race_data$ci_upper, "]"),
hoverinfo = "text"
)
))
}
}
# create dropdown buttons for each region.
buttons <- list()
num_traces_per_region <- length(race_levels)
for (i in seq_along(region_levels)) {
visibility <- rep(FALSE, length(traces))
start_idx <- (i - 1) * num_traces_per_region + 1
end_idx   <- i * num_traces_per_region
visibility[start_idx:end_idx] <- TRUE
buttons[[i]] <- list(
method = "update",
args = list(list(visible = visibility),
list(title = paste("Adolescent HPV Vaccine Uptake - Region:", region_levels[i]))),
label = region_levels[i]
)
}
# build the plotly object by adding each trace.
p <- plot_ly()
for (trace in traces) {
p <- add_trace(p,
x = trace$x,
y = trace$y,
type = trace$type,
name = trace$name,
error_y = trace$error_y,
visible = trace$visible,
text = trace$text,
hoverinfo = trace$hoverinfo)
}
# layout: stacked bars, axis labels, title, and dropdown filter.
p <- layout(p,
title = paste("Adolescent HPV Vaccine Uptake - Region:", region_levels[1]),
xaxis = list(title = "Maternal Education Level", tickfont = list(size = 14), titlefont = list(size = 16)), # increase tickfont and titlefont size
yaxis = list(title = "Percentage of Teenagers Vaccinated", titlefont = list(size = 16), tickfont = list(size = 14)), # increase axis title and tick font size
barmode = "stack",
updatemenus = list(
list(
type = "dropdown",
active = 0,
buttons = buttons,
x = 0.1,
xanchor = "left",
y = 1.15,
yanchor = "top"
)
),
font = list(size = 14), # increase general font size
legend = list(font = list(size = 12)), # increase legend font size
hoverlabel = list(font = list(size = 12)), # increase hover text font size
margin = list(b = 100), # increase bottom margin to prevent x-axis labels from being cut off
width = 800, #adding width to scale up figure
height = 600) #adding height to scale up figure
p
library(plotly)
library(dplyr)
# define the levels as they appear in my formats and sas output
edu_levels <- c("COLLEGE GRADUATE")
race_levels <- c("NON-HISPANIC BLACK ONLY")
region_levels <- c("NORTHEAST", "MIDWEST")
# for demonstration, i simulate an aggregated dataset.
# in my actual analysis, i would calculate the uptake percentages and confidence intervals.
# here, uptake percentages are simulated between 40 and 90.
set.seed(123)
agg_data <- expand.grid(
education = edu_levels,
race = race_levels,
region = region_levels,
stringsAsFactors = FALSE
) %>%
mutate(
uptake = round(runif(n(), 40, 90), 1),
ci_lower = uptake - round(runif(n(), 2, 5), 1),
ci_upper = uptake + round(runif(n(), 2, 5), 1)
)
# i'll create traces for each combination of region and race.
# initially, only the traces for the first region (northeast) will be visible.
traces <- list()
for (reg in region_levels) {
# filter data for the given region
reg_data <- filter(agg_data, region == reg)
for (race in race_levels) {
race_data <- filter(reg_data, race == race)
traces <- c(traces, list(
list(
x = race_data$education,
y = race_data$uptake,
type = "bar",
name = race,
error_y = list(
type = "data",
array = race_data$ci_upper - race_data$uptake,
arrayminus = race_data$uptake - race_data$ci_lower
),
visible = if (reg == region_levels[1]) TRUE else FALSE,
text = paste0("Race: ", race_data$race,
"<br>Uptake: ", race_data$uptake, "%",
"<br>CI: [", race_data$ci_lower, ", ", race_data$ci_upper, "]"),
hoverinfo = "text"
)
))
}
}
# create dropdown buttons for each region.
buttons <- list()
num_traces_per_region <- length(race_levels)
for (i in seq_along(region_levels)) {
visibility <- rep(FALSE, length(traces))
start_idx <- (i - 1) * num_traces_per_region + 1
end_idx   <- i * num_traces_per_region
visibility[start_idx:end_idx] <- TRUE
buttons[[i]] <- list(
method = "update",
args = list(list(visible = visibility),
list(title = paste("Adolescent HPV Vaccine Uptake - Region:", region_levels[i]))),
label = region_levels[i]
)
}
# build the plotly object by adding each trace.
p <- plot_ly()
for (trace in traces) {
p <- add_trace(p,
x = trace$x,
y = trace$y,
type = trace$type,
name = trace$name,
error_y = trace$error_y,
visible = trace$visible,
text = trace$text,
hoverinfo = trace$hoverinfo)
}
# layout: stacked bars, axis labels, title, and dropdown filter.
p <- layout(p,
title = paste("Adolescent HPV Vaccine Uptake - Region:", region_levels[1]),
xaxis = list(title = "Maternal Education Level", tickfont = list(size = 14), titlefont = list(size = 16)), # increase tickfont and titlefont size
yaxis = list(title = "Percentage of Teenagers Vaccinated", titlefont = list(size = 16), tickfont = list(size = 14)), # increase axis title and tick font size
barmode = "stack",
updatemenus = list(
list(
type = "dropdown",
active = 0,
buttons = buttons,
x = 0.1,
xanchor = "left",
y = 1.15,
yanchor = "top"
)
),
font = list(size = 14), # increase general font size
legend = list(font = list(size = 12)), # increase legend font size
hoverlabel = list(font = list(size = 12)), # increase hover text font size
margin = list(b = 100), # increase bottom margin to prevent x-axis labels from being cut off
width = 800, #adding width to scale up figure
height = 600) #adding height to scale up figure
p
library(knitr)
opts_chunk$set(
echo = FALSE, warning = FALSE, message = FALSE
)
here::i_am("code/thesiscleandata.R")
getwd()
setwd("/Users/emilioestrada/final-project")
getwd()
kable(bed_summary, caption = "Hospital bed availability by facility")
bed_summary <- readRDS("output/table_1.rds")
source("code/table1.R")
# code/table_1.R
# loading necessary libraries
library(dplyr)
library(readxl)
# defining file path relative to project root
file_path <- file.path("Data", "2024_q3.xlsx")
# reading the excel file
df <- read_excel(file_path, sheet = 1)
# creating table of bed counts by facility and renaming variables for clearer column titles
bed_summary <- df %>%
select(FAC_NAME, LIC_BEDS, AVL_BEDS, STF_BEDS) %>%
rename(
`Licensed Beds` = LIC_BEDS,
`Available Beds` = AVL_BEDS,
`Staffed Beds` = STF_BEDS,
`Facility Name` = FAC_NAME
) %>%
arrange(`Licensed Beds`)
# creating output directory if it doesn't exist
if (!dir.exists("Output")) dir.create("Output")
# saving output for use in the report
saveRDS(bed_summary, file = "Output/table_1.rds")
View(bed_summary)
# code/revenue_by_county.png
# loading necessary libraries
library(dplyr)
library(ggplot2)
library(tidyr)
library(scales)
library(readxl)
# defining file path relative to project root
file_path <- "data/2024_q3.xlsx"
# reading the excel file
df <- read_excel(file_path, sheet = 1)
# aggregating gross inpatient revenue by county
county_revenue <- df %>%
filter(COUNTY_NAME != "N/A") %>%  # removing blank "N/A" COUNTY_NAME data from plot
group_by(COUNTY_NAME) %>%
summarise(
GRIP_MCAR = sum(GRIP_MCAR, na.rm = TRUE),
GRIP_MCAR_MC = sum(GRIP_MCAR_MC, na.rm = TRUE),
GRIP_MCAL = sum(GRIP_MCAL, na.rm = TRUE),
GRIP_MCAL_MC = sum(GRIP_MCAL_MC, na.rm = TRUE)
) %>%
pivot_longer(
cols = -COUNTY_NAME,
names_to = "payer",
values_to = "revenue"
) %>%
mutate(
payer = case_when(
payer == "GRIP_MCAL" ~ "Medi-Cal - Traditional",
payer == "GRIP_MCAL_MC" ~ "Medi-Cal - Managed Care",
payer == "GRIP_MCAR" ~ "Medicare - Traditional",
payer == "GRIP_MCAR_MC" ~ "Medicare - Managed Care",
TRUE ~ payer
)
)
# creating the bar plot for all counties with scaled axes
revenue_plot <- ggplot(county_revenue, aes(x = COUNTY_NAME, y = revenue, fill = payer)) +
geom_bar(stat = "identity", position = "dodge") +
labs(
title = "Gross Inpatient Revenue by County",
x = "County",
y = "Revenue ($)",
fill = "Payer Type"
) +
scale_y_continuous(labels = label_comma()) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1), text = element_text(size = 5))
# saving the plot to the output directory
ggsave(
filename = "output/revenue_by_county_plot.png",
plot = revenue_plot,
width = 8,
height = 6,
dpi = 300,
bg = "white"
)
View(revenue_plot)
View(county_revenue)
renv::status()
renv::snapshot()
renv::status()
renv::snapshot()
renv::snapshot()
renv::activate()
renv::snapshot()
